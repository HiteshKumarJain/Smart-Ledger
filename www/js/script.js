// This is the API endpoint generated by Google Apps Script, which connects the client-side application to Google Sheets.
// In this project, we use Google Sheets as our database and perform standard CRUD operations (Create, Read, Update, Delete).
// Additionally, we use SheetDB.io specifically for handling DELETE operations.
// 
// Important:
// - Make sure to update this API URL each time you redeploy your Google Apps Script.
// - Also change the api in the delete functionailty from the SheetDB.io if you change the google sheet
let appScriptApi = "https://script.google.com/macros/s/AKfycbwcB5xL0X2IADGmhVix4btuknsLBfPRZzxSTo2zR39eh4NMjNRIZA0F43cciOYF6m37IA/exec";
let sheetdbApi = "https://sheetdb.io/api/v1/1t4s2tpynnj6p";  //this is api is of hiteshbhandarihb98@gmail.com
// let sheetdbApi = "https://sheetdb.io/api/v1/1i8f5j7jt2dkj"; // this api is of hiteshkumarjainhkj@gmail.com
let clientForm = document.getElementById("clientForm");
let add = document.getElementById("saveClientBtn");
let clientTBody = document.getElementById("clientTBody");
let isTransactionInProgress = false;

// Global variables for sorting and filtering
let clientData = [];
let sortField = 'name';
let sortDirection = 'asc';
let searchTerm = '';
document.getElementById('searchInput').value = '';

// Create toast container if not exists
if (!document.getElementById("toast-container")) {
    const toastContainer = document.createElement("div");
    toastContainer.id = "toast-container";
    toastContainer.style.position = "fixed";
    toastContainer.style.top = "50%";
    toastContainer.style.left = "50%";
    toastContainer.style.transform = "translate(-50%, -50%)";
    toastContainer.style.zIndex = "1000";
    document.body.appendChild(toastContainer);
}

// Search functionality
document.getElementById('searchInput').addEventListener('input', function (e) {
    searchTerm = e.target.value.toLowerCase();
    filterAndSortData();
});

document.getElementById('refreshBtn').addEventListener('click', function () {
    window.location.reload();
});

// Sort functionality
document.getElementById('sortBy').addEventListener('change', function (e) {
    sortField = e.target.value;
    filterAndSortData();
});

document.getElementById('sortDirection').addEventListener('click', function () {
    sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
    this.classList.toggle('asc');
    filterAndSortData();
});

// Filter and sort data, then update the display
function filterAndSortData() {
    // Get all client data if we haven't already
    if (clientData.length === 0) {
        showLoadingIndicator(true);
        fetch(appScriptApi)
            .then(res => res.json())
            .then(data => {
                clientData = data.clientData;
                processAndDisplayData();
                showLoadingIndicator(false);
            });
    } else {
        processAndDisplayData();
    }
}

function processAndDisplayData() {
    // First filter the data
    let filteredData = clientData.filter(client => {
        // Check if the client name contains the search term
        return client[1].toLowerCase().includes(searchTerm);
    });

    // Then sort the data
    filteredData.sort((a, b) => {
        let valueA, valueB;

        if (sortField === 'name') {
            valueA = a[1].toLowerCase();
            valueB = b[1].toLowerCase();
        } else if (sortField === 'amount') {
            valueA = parseFloat(a[2]);
            valueB = parseFloat(b[2]);
        }

        if (valueA < valueB) return sortDirection === 'asc' ? -1 : 1;
        if (valueA > valueB) return sortDirection === 'asc' ? 1 : -1;
        return 0;
    });

    // Update the display
    updateClientTable(filteredData);
}

function updateClientTable(data) {
    if (data.length === 0) {
        clientTBody.innerHTML = `
            <tr>
                <td colspan="4" style="text-align: center; padding: 20px;">
                    No clients found. Try a different search term or add a new client.
                </td>
            </tr>
        `;
        isTransactionInProgress = false;
        return;
    }

    let trtd = data.map((each, index) => {
        return `
            <tr>
                <td class="sl.no">${index + 1}</td>    
                <td class="name">${each[1]}</td>
                <td class="amount">${each[2]}</td>
                <td class="action">
                <button class="addDataBtn" onclick='addData(${JSON.stringify(each)})'>Add Data</button>
                    <button class="detailsBtn" onclick="goToDetailsPage(${each[0]},'${each[1]}',${each[2]})" >Details</button> 
                    <button class="deleteClientBtn" onclick="showConfirmModal(${each[0]},'${each[1]}')" >Delete</button>
                </td>  
            </tr>
        `;
    });

    clientTBody.innerHTML = trtd.join("");
    isTransactionInProgress = false;
}

// Show/hide loading indicator
function showLoadingIndicator(show) {
    const loaderRow = document.getElementById('loaderRow');
    if (loaderRow) {
        loaderRow.style.display = show ? 'table-row' : 'none';
    }
}

document.getElementById('addClientBtn').addEventListener('click', function () {
    document.getElementById('clientName').value = '';
    document.getElementById('clientAmount').value = '';
    document.getElementById('clientModal').style.display = 'block';
    document.getElementById('overlay').style.display = 'block';
    // Disable scrolling on the body
    document.body.classList.add('no-scroll');
});

//  Function for saving the client details
document.getElementById("saveClientBtn").addEventListener('click', function (e) {
    e.preventDefault();
    const name = clientForm[0].value;
    const amount = clientForm[1].value;
    const generateUniqueId = () => {
        let uniqueId;
        do {
            const timestamp = Date.now().toString().slice(-3).padStart(3, '0'); // Ensure 3 digits
            const randomPart = Math.floor(100 + Math.random() * 900); // Always a 3-digit number
            uniqueId = timestamp + randomPart.toString(); // Ensure both parts stay as strings
        } while (uniqueId.length !== 6); // This is redundant but still a good safeguard

        return uniqueId;
    }

    const uniqueId = generateUniqueId();
    let date = new Date();
    let formattedDate = String(date.getDate()).padStart(2, '0') + '-' +
        String(date.getMonth() + 1).padStart(2, '0') + '-' +
        date.getFullYear();
    if (!name) {
        showToast("Please enter client name", 'error');
    } else if (!amount) {
        showToast("Please enter amount", 'error');
    } else if (name && amount) {
        // Show saving status
        add.innerHTML = '<span>Saving...</span> <span class="btn-loader"></span>';
        add.disabled = true;

        let obj = {
            type: 'clientData',
            id: uniqueId,
            name: name,
            amount: amount,
            date: formattedDate,
            billNo: "",
            cash: "",
            remarks: ""
        }

        fetch(appScriptApi, {
            method: "POST",
            body: JSON.stringify(obj)
        })
            // Parse the response text from the server and call readData() function to update the UI with the new data
            .then(res => res.text())
            .then(data => {
                readData()
                // Show an alert with the response message from the server
                showToast("Client added successfully", 'success');
                // Reset the form and change the text content of the add button back to its original state
                add.innerHTML = "Save";
                add.disabled = false;
                clientForm.reset();
                document.getElementById('clientModal').style.display = 'none';
                document.getElementById('overlay').style.display = 'none';
                // Re-enable scrolling
                document.body.classList.remove('no-scroll');
            })
            .catch(error => {
                console.log("Error during adding client" + error);
                showToast("Unable to add the client. Please try again later.", 'error');
                add.innerHTML = "Save";
                add.disabled = false;
                // Re-enable scrolling
                document.body.classList.remove('no-scroll');
            })
    }
});

let clientIdToDelete = null;
let clientNameToDelete = null;

function showConfirmModal(id, name) {
    // Store the id to be deleted
    console.log(`ID: ${id}, Name: ${name}`);
    clientIdToDelete = id;
    clientNameToDelete = name;
    document.getElementById('clientNameDisplay').textContent = clientNameToDelete;
    // Display the confirmation modal
    document.getElementById('confirmModal').style.display = 'flex';
    document.getElementById('confirmOverlay').style.display = 'block';
    document.body.classList.add('no-scroll');
}

// Handle the confirmation button click
document.getElementById('confirmDeleteBtn').addEventListener('click', function () {
    if (clientIdToDelete !== null) {
        // Update button to show loading state
        this.innerHTML = '<span>Deleting...</span> <span class="btn-loader"></span>';
        this.disabled = true;
        document.getElementById('cancelDeleteBtn').disabled = true;

        // Call the deleteClient function if the user confirms
        deleteClient(clientIdToDelete);
    }
});

// Handle the cancel button click
document.getElementById('cancelDeleteBtn').addEventListener('click', function () {
    // Close the modal without deleting
    closeDeleteModal();
});

// Close the modal and reset clientIdToDelete
function closeDeleteModal() {
    document.getElementById('confirmModal').style.display = 'none';
    document.getElementById('confirmOverlay').style.display = 'none';

    // Reset button text if it was changed
    const confirmBtn = document.getElementById('confirmDeleteBtn');
    confirmBtn.innerHTML = 'Yes, Delete';
    confirmBtn.disabled = false;
    document.getElementById('cancelDeleteBtn').disabled = false;
    document.body.classList.remove('no-scroll');

    clientIdToDelete = null;
    clientNameToDelete = null;
}

function deleteClient(id) {
    // The below api is taken from the sheetdb.io where our google sheet is linked.
    fetch(`${sheetdbApi}/clientId/${id}?sheet=ClientTransactions`, {
        method: 'DELETE',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    })
        .then((response) => response.json())
        .then((data) => {
            console.log("now deleting the data in client data table");

            fetch(`${sheetdbApi}/id/${id}?sheet=ClientData`, {
                method: 'DELETE',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            })
                .then((response) => response.json())
                .then((data) => {
                    console.log('Data deleted successfully from both tables:', data);
                    readData();
                    showToast("Client deleted successfully", 'success');
                    closeDeleteModal();
                }
                );
        }
        )
        .catch((error) => {
            console.log('Error during cascade deletion:', error);
            showToast("An error occurred during deletion. Please try again.", 'error');
            closeDeleteModal();
        });
}

function readData() {
    showLoadingIndicator(true);
    fetch(appScriptApi)
        .then(res => res.json())
        .then(data => {
            clientData = data.clientData;
            clientData = clientData.reverse();
            if (clientData.length === 0) {
                clientTBody.innerHTML = `
                    <tr>
                        <td colspan="4" style="text-align: center; padding: 20px;">
                            No clients yet. Add your first client to get started!
                        </td>
                    </tr>
                `;
                showLoadingIndicator(false);
                isTransactionInProgress = false;
                return;
            }

            // Apply current sorting and filtering
            if (searchTerm || sortField !== 'name' || sortDirection !== 'asc') {
                filterAndSortData();
            } else {
                // Just display the data normally
                updateClientTable(clientData);
                showLoadingIndicator(false);
            }
        })
        .catch(error => {
            console.log("Error fetching client data: " + error);
            showLoadingIndicator(false);
            showToast("Unable to load client data. Please refresh the page.", 'error');
            isTransactionInProgress = false;
        });
}
// Call the readData() function on page load to populate the table with data from the API
readData();

function goToDetailsPage(id, name, amount) {
    window.location.href = `details.html?id=${id}&name=${name}&amount=${amount}`;
}

function showToast(message, type, duration = 3000) {
    // Remove any existing toasts
    const existingToast = document.getElementById("toast-element");
    if (existingToast) {
        existingToast.remove();
    }

    // Create toast container if not exists
    const toastContainer = document.getElementById("toast-container");

    // Create toast message
    const toast = document.createElement("div");
    toast.className = `toast-${type}`;
    toast.id = "toast-element";

    // Set appropriate icon based on toast type
    const icon = type === 'success'
        ? '<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline></svg>'
        : '<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>';

    toast.innerHTML = `
        <div class="toast-icon">${icon}</div>
        <div class="toast-message">${message}</div>
    `;

    toast.style.position = "fixed";
    toast.style.left = "50%";
    toast.style.transform = "translateX(-50%)";
    toast.style.top = "-50px";
    toast.style.maxWidth = "400px";
    toast.style.width = "90%";
    toast.style.padding = "16px 20px";
    toast.style.borderRadius = "8px";
    toast.style.boxShadow = "0 4px 12px rgba(0, 0, 0, 0.15)";
    toast.style.display = "flex";
    toast.style.alignItems = "center";
    toast.style.justifyContent = "flex-start";
    toast.style.opacity = "0";
    toast.style.transition = "all 0.5s ease";

    // Append toast to container
    toastContainer.appendChild(toast);

    // Show the toast with animation
    setTimeout(() => {
        toast.style.opacity = "1";
        toast.style.top = "50%";
        toast.style.transform = "translate(-50%, -50%)";
    }, 100);

    // Remove toast after duration
    setTimeout(() => {
        toast.style.opacity = "0";
        toast.style.top = "-50px";
        setTimeout(() => toast.remove(), 500); // Smooth fade-out effect
    }, duration);
}

document.getElementById("closeModalBtn").addEventListener('click', function (e) {
    e.preventDefault();
    document.getElementById('clientModal').style.display = 'none';
    document.getElementById('overlay').style.display = 'none';
    // Re-enable scrolling
    document.body.classList.remove('no-scroll');
});

let clientTransactionForm = document.getElementById("clientTransactionForm");
let addTransaction = document.getElementById("saveTransactionBtn");
let transactionClientId = null;
let transactionClientName = null;
let transactionAmount = null;

function addData(client) {
    if (client[0] && client[1]) {
        transactionClientId = client[0];
        transactionClientName = client[1];
        transactionAmount = client[2];
    }
    document.getElementById('clientNameSpan').textContent = transactionClientName
    document.getElementById('dataDate').value = '';
    document.getElementById('dataBillNo').value = '';
    document.getElementById('dataAmount').value = '';
    document.getElementById('dataCashReceived').value = '';
    document.getElementById('dataRemarks').value = '';
    document.getElementById('addDataModal').style.display = 'block';
    document.getElementById('addDataOverlay').style.display = 'block';
    document.body.classList.add('no-scroll');
}

// Function for saving the Transaction details
document.getElementById('saveTransactionBtn').addEventListener('click', function (e) {
    var newAmount = null;
    e.preventDefault();
    // Prevent multiple rapid submissions
    if (isTransactionInProgress) {
        showToast("Please wait for the previous transaction to complete", 'error');
        return;
    }
    let inputDate = clientTransactionForm[0].value;
    let dateObj = new Date(inputDate);
    let formattedDate = String(dateObj.getDate()).padStart(2, '0') + '-' +
        String(dateObj.getMonth() + 1).padStart(2, '0') + '-' +
        dateObj.getFullYear();
    let billNo = clientTransactionForm[1].value;
    let amount = clientTransactionForm[2].value;
    let cash = clientTransactionForm[3].value;
    let remarks = clientTransactionForm[4].value;
    if (formattedDate === "NaN-NaN-NaN") {
        showToast("Please select a transaction date", 'error');
        console.log("Please enter date");
        return;
    } else if (!amount && !cash) {
        showToast("Please enter either Amount or Cash Received", 'error');
        console.log("Please enter either Amount or Cash.");
        return;
    } else if (formattedDate && (amount || cash)) {
        isTransactionInProgress = true;
        newAmount = Number(transactionAmount) + Number(amount || 0) - Number(cash || 0);
        console.log("the new amount is : " + newAmount);

        // Show saving status with loader
        addTransaction.innerHTML = '<span>Saving...</span> <span class="btn-loader"></span>';
        addTransaction.disabled = true;

        let transaction = {
            type: 'transactionData',
            id: transactionClientId,
            name: transactionClientName,
            date: formattedDate,
            billNo: billNo,
            amount: amount,
            cash: cash,
            newAmount: newAmount,
            remarks: remarks
        }
        fetch(appScriptApi, {
            method: "POST",
            body: JSON.stringify(transaction)
        })
            // Parse the response text from the server and call readData() function to update the UI with the new data
            .then(res => res.text())
            .then(data => {
                readData()
                // Show a success toast message
                showToast("Transaction saved successfully", 'success');
                // Reset the form and change the text content of the add button back to its original state
                addTransaction.innerHTML = "Save";
                addTransaction.disabled = false;
                document.getElementById('addDataModal').style.display = 'none';
                document.getElementById('addDataOverlay').style.display = 'none';
                document.body.classList.remove('no-scroll');

            })
            .catch(error => {
                console.log("Error during adding data for client" + error);
                showToast("Unable to add transaction. Please try again.", 'error');
                addTransaction.innerHTML = "Save";
                addTransaction.disabled = false;
                document.body.classList.remove('no-scroll');
                isTransactionInProgress = false;
            })
    }
});

document.getElementById("closeDataModalBtn").addEventListener('click', function (e) {
    e.preventDefault();
    document.getElementById('addDataModal').style.display = 'none';
    document.getElementById('addDataOverlay').style.display = 'none';
    document.body.classList.remove('no-scroll');
});